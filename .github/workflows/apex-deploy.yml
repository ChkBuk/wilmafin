name: Query SYSDATE from Oracle Autonomous DB

on: [push]
permissions:
  contents: read 
jobs:
  query-sysdate:
    environment: Development
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Public Repo
        uses: actions/checkout@v4
        
      - name: Print variables
        run: |
          echo ${{ secrets.ACCESS_TOKEN }}
          
      - name: Checkout private wallet repo
        uses: actions/checkout@v4
        with:
          repository: ChkBuk/secretsrepo
          path: oci_wallet
          token: "${{ secrets.ACCESS_TOKEN }}"

      - name: Checkout private wallet repo
        uses: actions/checkout@v4
        with:
          repository: ChkBuk/secretsrepo
          path: oci_wallet
          token: "${{ secrets.ACCESS_TOKEN }}"
      
      - name: Debug Wallet Structure
        run: |
          echo "===== Repository Structure ====="
          find . -type d | sort
          
          echo "===== oci_wallet Contents ====="
          if [ -d "oci_wallet/oci_wallet" ]; then
            echo "⚠️ Nested oci_wallet directory found!"
            ls -la oci_wallet/oci_wallet/
          else
            ls -la oci_wallet/
          fi
    
     
          
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Install SQLcl 
        run: |
          # Clean up any existing installations
          sudo rm -f /usr/bin/sql
          
          # Setup directories
          SQLCL_DIR="$HOME/sqlcl"
          mkdir -p "$SQLCL_DIR"
          cd "$SQLCL_DIR"
          
          # Download and extract
          echo "Downloading SQLcl..."
          curl -L -o sqlcl.zip https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip
          unzip -q sqlcl.zip -d "$SQLCL_DIR"
          rm sqlcl.zip
          
          # Handle nested directory structure
          if [ -d "$SQLCL_DIR/sqlcl" ]; then
            echo "Moving files from nested directory..."
            mv "$SQLCL_DIR/sqlcl"/* "$SQLCL_DIR"/
            rm -r "$SQLCL_DIR/sqlcl"
          fi
          
          # Set permissions
          chmod +x "$SQLCL_DIR/bin/sql"
          
          # Verify installation
          echo "SQLcl version:"
          "$SQLCL_DIR/bin/sql" -version
          
          # Add to PATH
          echo "$SQLCL_DIR/bin" >> $GITHUB_PATH

      - name: Configure Wallet
        run: |
          mkdir -p $HOME/wallet
          cp -r oci_wallet/oci_wallet/* $HOME/wallet/
          sed -i 's|?/network/admin|$TNS_ADMIN|g' $HOME/wallet/sqlnet.ora
        shell: bash

      - name: Set Env Variables
        run: |
          echo "TNS_ADMIN=$HOME/wallet" >> $GITHUB_ENV
          echo "PATH=$PATH:$(pwd)/sqlcl/bin" >> $GITHUB_ENV

      - name: Test Oracle Connection
        id: test-connection
        run: |
          echo "===== Oracle Connection Test ====="
          echo "Using SQLcl: $(which sql)"
          echo "Version: $(sql -version)"
          
          # Create temp directory for artifacts
          mkdir -p oracle_test
          cd oracle_test
          
          # Build connection string with all security parameters
          CONN_STRING="(description=(
            retry_count=3)
            (retry_delay=3)
            (address=(protocol=tcps)
              (host=${{ secrets.ORACLE_HOST }})
              (port=${{ secrets.ORACLE_PORT }}))
            (connect_data=(service_name=${{ secrets.ORACLE_SERVICE }}))
            (security=(
              ssl_server_cert_dn=\"CN=adb.ap-melbourne-1.oraclecloud.com,OU=Oracle ADB,O=Oracle Corporation,L=Redwood City,ST=California,C=US\"
              ssl_server_dn_match=yes))
          )"
          
          # Create test script with all output options
          cat << 'SQL_EOF' > oracle_test.sql
          /* OUTPUT FORCE SETTINGS */
          SET ECHO ON
          SET FEEDBACK ON
          SET HEADING ON
          SET LINESIZE 1000
          SET PAGESIZE 10000
          SET SERVEROUTPUT ON SIZE UNLIMITED FORMAT WRAPPED
          SET SQLFORMAT ANSICONSOLE
          SET TERMOUT ON
          SET TIMING ON
          SET VERIFY ON
          WHENEVER SQLERROR EXIT SQL.SQLCODE
          
          /* CONNECTION TESTS */
          PROMPT [1/3] === BASIC QUERY TEST ===
          SELECT 'CONNECTION_SUCCESS:'||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM dual;
          
          PROMPT [2/3] === VERSION INFO ===
          SELECT * FROM v$version;
          
          PROMPT [3/3] === NETWORK CONFIG ===
          SELECT 
            SYS_CONTEXT('USERENV', 'NETWORK_PROTOCOL') AS protocol,
            SYS_CONTEXT('USERENV', 'SERVER_HOST') AS host,
            SYS_CONTEXT('USERENV', 'SERVICE_NAME') AS service
          FROM dual;
          
          EXIT;
          SQL_EOF
          
          # Execute with full debugging
          echo "Executing connection test..."
          sql -v -l "${{ secrets.DB_USER }}/${{ secrets.DB_PASSWORD }}@$CONN_STRING" @oracle_test.sql 2>&1 | tee oracle_test.log
          
          # Verify successful output
          if grep -q "CONNECTION_SUCCESS" oracle_test.log; then
            echo "✅ Oracle connection successful"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Connection failed - dumping debug info:"
            echo "=== LAST 20 LINES ==="
            tail -n 20 oracle_test.log
            echo "=== WALLET CONTENTS ==="
            ls -la $TNS_ADMIN
            echo "=== NETWORK CHECK ==="
            nc -zv ${{ secrets.ORACLE_HOST }} ${{ secrets.ORACLE_PORT }}
            exit 1
          end
        env:
          TNS_ADMIN: ${{ env.WALLET_DIR }}
          LD_LIBRARY_PATH: ${{ env.WALLET_DIR }}
          PATH: ${{ env.SQLCL_DIR }}/bin:$PATH
