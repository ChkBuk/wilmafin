name: APEX Deployment

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install SQLcl
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip default-jre
        wget https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip
        unzip sqlcl-latest.zip
        echo "$(pwd)/sqlcl/bin" >> $GITHUB_PATH  # Updated path addition method
        
    - name: Verify SQLcl installation
      run: |
        echo "SQLcl path: $(which sql || echo 'Not found')"
        ${GITHUB_WORKSPACE}/sqlcl/bin/sql -v
        
    - name: Verify install script exists
      run: |
        ls -la f105/install.sql
        if [ ! -f "f105/install.sql" ]; then
          echo "Error: install.sql not found at f105/install.sql"
          exit 1
        fi
    
    - name: Configure Wallet
      run: |
        echo "===== Setting Up Wallet ====="
        
        # 1. Verify files exist in repo
        echo "Repository contents:"
        ls -la oci_wallet/ || echo "No oci_wallet directory found"
        
        # 2. Create target directory
        WALLET_DIR="$HOME/oracle/wallet"
        mkdir -p $WALLET_DIR
        
        # 3. Copy with error handling
        if [ -d "oci_wallet" ]; then
          echo "Copying wallet files..."
          cp oci_wallet/* $WALLET_DIR/
          echo "Copied files:"
          ls -la $WALLET_DIR
          
          # 4. Set permissions
          chmod 600 $WALLET_DIR/*
          
          # 5. Configure environment
          echo "TNS_ADMIN=$WALLET_DIR" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$WALLET_DIR" >> $GITHUB_ENV
        else
          echo "Error: oci_wallet directory missing"
          exit 1
        fi
    
    - name: Test Connection
      env:
        TNS_ADMIN: ${{ env.TNS_ADMIN }}
        LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
      run: |
        echo "===== Testing Connection ====="
        CONN="admin/MahindaCollege2000!@ga8e55f0b539d22_sldevdb_high"
        
        cat << 'EOF' > test.sql
        SET ECHO ON
        SET FEEDBACK ON
        SET SERVEROUTPUT ON
        SELECT 'CONNECTED_AS:'||USER||' AT:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') FROM dual;
        EXIT;
        EOF
        
        ${GITHUB_WORKSPACE}/sqlcl/bin/sql -v -l "$CONN" @test.sql 2>&1 | tee conn_test.log
        echo "===== Connection Output ====="
        cat conn_test.log
    
    - name: Run Installation
      env:
        TNS_ADMIN: ${{ env.TNS_ADMIN }}
        LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
      run: |
        echo "===== Running Installation ====="
        CONN="admin/MahindaCollege2000!@ga8e55f0b539d22_sldevdb_high"
        
        cat << 'EOF' > install_wrapper.sql
        SET ECHO ON
        SET FEEDBACK ON
        SET SERVEROUTPUT ON SIZE UNLIMITED
        WHENEVER SQLERROR EXIT SQL.SQLCODE
        
        PROMPT === PRE-INSTALL CHECK ===
        SELECT * FROM v$version;
        
        PROMPT === RUNNING INSTALL.SQL ===
        @f105/install.sql
        
        PROMPT === POST-INSTALL CHECK ===
        SELECT 'COMPLETED_AT:'||TO_CHAR(SYSDATE,'HH24:MI:SS') FROM dual;
        EXIT;
        EOF
        
        ${GITHUB_WORKSPACE}/sqlcl/bin/sql -v -l "$CONN" @install_wrapper.sql 2>&1 | tee install.log
        echo "===== Installation Output ====="
        cat install.log
