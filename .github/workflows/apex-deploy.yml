name: Oracle Database Deployment

on: [push]

env:
  SQLCL_VERSION: 23.4.0
  SQLCL_DIR: ${{ github.workspace }}/sqlcl
  WALLET_DIR: ${{ github.workspace }}/oracle/wallet

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout code with submodules
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
        submodules: 'recursive'
    
    # 2. Cache SQLcl
    - name: Cache SQLcl
      id: cache-sqlcl
      uses: actions/cache@v3
      with:
        path: ${{ env.SQLCL_DIR }}
        key: sqlcl-${{ env.SQLCL_VERSION }}
    
    # 3. Download and install SQLcl (with fallback URL)
    - name: Install SQLcl
      if: steps.cache-sqlcl.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.SQLCL_DIR }}
        cd ${{ env.SQLCL_DIR }}
        
        # Try multiple download sources
        if ! wget https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-${{ env.SQLCL_VERSION }}.zip; then
          echo "Failed primary download, trying archive..."
          wget https://archive.oracle.com/otn_software/java/sqldeveloper/sqlcl-${{ env.SQLCL_VERSION }}.zip || \
          (echo "SQLcl download failed" && exit 1)
        fi
        
        unzip sqlcl-${{ env.SQLCL_VERSION }}.zip
        rm sqlcl-${{ env.SQLCL_VERSION }}.zip
        chmod +x ${{ env.SQLCL_DIR }}/bin/sql
        echo "SQLcl ${{ env.SQLCL_VERSION }} installed to ${{ env.SQLCL_DIR }}"
    
    # 4. Set up Oracle wallet
    - name: Configure Wallet
      run: |
        mkdir -p ${{ env.WALLET_DIR }}
        cp secrets/oci_wallet/* ${{ env.WALLET_DIR }}/
        chmod 600 ${{ env.WALLET_DIR }}/*
        
        # Update sqlnet.ora with correct path
        sed -i "s|?/network/admin|${{ env.WALLET_DIR }}|g" ${{ env.WALLET_DIR }}/sqlnet.ora
        
        echo "TNS_ADMIN=${{ env.WALLET_DIR }}" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${{ env.WALLET_DIR }}" >> $GITHUB_ENV
        
        echo "Wallet contents:"
        ls -la ${{ env.WALLET_DIR }}
    
    # 5. Run database installation
    - name: Run Installation Script
      env:
        PATH: ${{ env.SQLCL_DIR }}/bin:$PATH
        TNS_ADMIN: ${{ env.TNS_ADMIN }}
        LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
      run: |
        echo "===== Starting Installation ====="
        echo "Using SQLcl: $(which sql)"
        echo "Version: $(sql -version)"
        
        cat << 'EOF' > run_install.sql
        SET ECHO ON
        SET FEEDBACK ON
        SET SERVEROUTPUT ON SIZE UNLIMITED
        SET SQLFORMAT ANSICONSOLE
        WHENEVER SQLERROR EXIT SQL.SQLCODE
        
        PROMPT === PRE-INSTALL CHECK ===
        SELECT 'Connected as: '||USER FROM dual;
        SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') AS current_time FROM dual;
        
        PROMPT === RUNNING INSTALL.SQL ===
        @f105/install.sql
        
        PROMPT === POST-INSTALL CHECK ===
        SELECT 'COMPLETED_AT: '||TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM dual;
        EXIT;
        EOF
        
        sql -v -l ${{ secrets.DB_USER }}/${{ secrets.DB_PASSWORD }}@${{ vars.DB_ALIAS }} @run_install.sql 2>&1 | tee install.log
        
        echo "===== INSTALLATION OUTPUT ====="
        cat install.log
