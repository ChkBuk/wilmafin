name: Query SYSDATE from Oracle Autonomous DB

on: [push]
permissions:
  contents: read 
jobs:
  query-sysdate:
    environment: Development
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Public Repo
        uses: actions/checkout@v4
        
      - name: Print variables
        run: |
          echo ${{ secrets.ACCESS_TOKEN }}
          
      - name: Checkout private wallet repo
        uses: actions/checkout@v4
        with:
          repository: ChkBuk/secretsrepo
          path: oci_wallet
          token: "${{ secrets.ACCESS_TOKEN }}"

      - name: Checkout private wallet repo
        uses: actions/checkout@v4
        with:
          repository: ChkBuk/secretsrepo
          path: oci_wallet
          token: "${{ secrets.ACCESS_TOKEN }}"
      
      - name: Debug Wallet Structure
        run: |
          echo "===== Repository Structure ====="
          find . -type d | sort
          
          echo "===== oci_wallet Contents ====="
          if [ -d "oci_wallet/oci_wallet" ]; then
            echo "⚠️ Nested oci_wallet directory found!"
            ls -la oci_wallet/oci_wallet/
          else
            ls -la oci_wallet/
          fi
    
     
          
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Install SQLcl 
        run: |
          # Clean up any existing installations
          sudo rm -f /usr/bin/sql
          
          # Setup directories
          SQLCL_DIR="$HOME/sqlcl"
          mkdir -p "$SQLCL_DIR"
          cd "$SQLCL_DIR"
          
          # Download and extract
          echo "Downloading SQLcl..."
          curl -L -o sqlcl.zip https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip
          unzip -q sqlcl.zip -d "$SQLCL_DIR"
          rm sqlcl.zip
          
          # Handle nested directory structure
          if [ -d "$SQLCL_DIR/sqlcl" ]; then
            echo "Moving files from nested directory..."
            mv "$SQLCL_DIR/sqlcl"/* "$SQLCL_DIR"/
            rm -r "$SQLCL_DIR/sqlcl"
          fi
          
          # Set permissions
          chmod +x "$SQLCL_DIR/bin/sql"
          
          # Verify installation
          echo "SQLcl version:"
          "$SQLCL_DIR/bin/sql" -version
          
          # Add to PATH
          echo "$SQLCL_DIR/bin" >> $GITHUB_PATH

      - name: Configure Wallet
        run: |
          mkdir -p $HOME/wallet
          cp -r oci_wallet/oci_wallet/* $HOME/wallet/
          sed -i 's|?/network/admin|$TNS_ADMIN|g' $HOME/wallet/sqlnet.ora
        shell: bash

      - name: Set Env Variables
        run: |
          echo "TNS_ADMIN=$HOME/wallet" >> $GITHUB_ENV
          echo "PATH=$PATH:$(pwd)/sqlcl/bin" >> $GITHUB_ENV

      - name: Query SYSDATE
        run: |
          echo "===== Testing Connection ====="
          CONN_STRING="(description=(address=(protocol=tcps)(host=$ORACLE_HOST)(port=$ORACLE_PORT)(connect_data=(service_name=$ORACLE_SERVICE)))"
          
          # Write SQL to file for better control
          cat << 'SQL_EOF' > query.sql
          SET ECHO ON
          SET FEEDBACK ON
          SET SERVEROUTPUT ON SIZE UNLIMITED
          SET SQLFORMAT ANSICONSOLE
          SET VERIFY ON
          
          PROMPT === CONNECTION TEST ===
          SELECT 'DB_TIME: ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM dual;
          
          PROMPT === VERSION INFO ===
          SELECT * FROM v$version;
          
          EXIT;
          SQL_EOF
          
          # Execute with forced output
          $HOME/sqlcl/bin/sql -v -l "$ORACLE_USER/$ORACLE_PASSWORD@$CONN_STRING" @query.sql 2>&1 | tee output.log
          
          echo "===== FULL OUTPUT ====="
          cat output.log
        env:
          ORACLE_USER: ${{ secrets.DB_USER }}
          ORACLE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          ORACLE_HOST: ${{ secrets.ORACLE_HOST }}
          ORACLE_PORT: ${{ secrets.ORACLE_PORT }}
          ORACLE_SERVICE: ${{ secrets.ORACLE_SERVICE }}
          DB_ALIAS: ${{vars.DB_ALIAS}}
